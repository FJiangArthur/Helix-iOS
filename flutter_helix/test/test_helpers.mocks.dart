// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_helix/test/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i8;

import 'package:flutter_helix/core/utils/logging_service.dart' as _i15;
import 'package:flutter_helix/models/analysis_result.dart' as _i4;
import 'package:flutter_helix/models/audio_configuration.dart' as _i2;
import 'package:flutter_helix/models/conversation_model.dart' as _i12;
import 'package:flutter_helix/models/glasses_connection_state.dart' as _i13;
import 'package:flutter_helix/models/transcription_segment.dart' as _i3;
import 'package:flutter_helix/services/audio_service.dart' as _i6;
import 'package:flutter_helix/services/glasses_service.dart' as _i5;
import 'package:flutter_helix/services/llm_service.dart' as _i11;
import 'package:flutter_helix/services/settings_service.dart' as _i14;
import 'package:flutter_helix/services/transcription_service.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioConfiguration_0 extends _i1.SmartFake
    implements _i2.AudioConfiguration {
  _FakeAudioConfiguration_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTranscriptionSegment_1 extends _i1.SmartFake
    implements _i3.TranscriptionSegment {
  _FakeTranscriptionSegment_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAnalysisResult_2 extends _i1.SmartFake
    implements _i4.AnalysisResult {
  _FakeAnalysisResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConversationSummary_3 extends _i1.SmartFake
    implements _i4.ConversationSummary {
  _FakeConversationSummary_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSentimentAnalysisResult_4 extends _i1.SmartFake
    implements _i4.SentimentAnalysisResult {
  _FakeSentimentAnalysisResult_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGlassesDeviceInfo_5 extends _i1.SmartFake
    implements _i5.GlassesDeviceInfo {
  _FakeGlassesDeviceInfo_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGlassesHealthStatus_6 extends _i1.SmartFake
    implements _i5.GlassesHealthStatus {
  _FakeGlassesHealthStatus_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i1.Mock implements _i6.AudioService {
  MockAudioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioConfiguration get configuration =>
      (super.noSuchMethod(
            Invocation.getter(#configuration),
            returnValue: _FakeAudioConfiguration_0(
              this,
              Invocation.getter(#configuration),
            ),
          )
          as _i2.AudioConfiguration);

  @override
  bool get isRecording =>
      (super.noSuchMethod(Invocation.getter(#isRecording), returnValue: false)
          as bool);

  @override
  bool get hasPermission =>
      (super.noSuchMethod(Invocation.getter(#hasPermission), returnValue: false)
          as bool);

  @override
  _i7.Stream<_i8.Uint8List> get audioStream =>
      (super.noSuchMethod(
            Invocation.getter(#audioStream),
            returnValue: _i7.Stream<_i8.Uint8List>.empty(),
          )
          as _i7.Stream<_i8.Uint8List>);

  @override
  _i7.Stream<double> get audioLevelStream =>
      (super.noSuchMethod(
            Invocation.getter(#audioLevelStream),
            returnValue: _i7.Stream<double>.empty(),
          )
          as _i7.Stream<double>);

  @override
  _i7.Stream<bool> get voiceActivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#voiceActivityStream),
            returnValue: _i7.Stream<bool>.empty(),
          )
          as _i7.Stream<bool>);

  @override
  _i7.Future<void> initialize(_i2.AudioConfiguration? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> requestPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> pauseRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resumeRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> startConversationRecording(String? conversationId) =>
      (super.noSuchMethod(
            Invocation.method(#startConversationRecording, [conversationId]),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#startConversationRecording, [
                  conversationId,
                ]),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> stopConversationRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopConversationRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<_i6.AudioInputDevice>> getInputDevices() =>
      (super.noSuchMethod(
            Invocation.method(#getInputDevices, []),
            returnValue: _i7.Future<List<_i6.AudioInputDevice>>.value(
              <_i6.AudioInputDevice>[],
            ),
          )
          as _i7.Future<List<_i6.AudioInputDevice>>);

  @override
  _i7.Future<void> selectInputDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#selectInputDevice, [deviceId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> configureAudioProcessing({
    bool? enableNoiseReduction = true,
    bool? enableEchoCancellation = true,
    double? gainLevel = 1.0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#configureAudioProcessing, [], {
              #enableNoiseReduction: enableNoiseReduction,
              #enableEchoCancellation: enableEchoCancellation,
              #gainLevel: gainLevel,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setVoiceActivityDetection(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setVoiceActivityDetection, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setAudioQuality(_i2.AudioQuality? quality) =>
      (super.noSuchMethod(
            Invocation.method(#setAudioQuality, [quality]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> testAudioRecording() =>
      (super.noSuchMethod(
            Invocation.method(#testAudioRecording, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [TranscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranscriptionService extends _i1.Mock
    implements _i10.TranscriptionService {
  MockTranscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get isTranscribing =>
      (super.noSuchMethod(
            Invocation.getter(#isTranscribing),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasPermissions =>
      (super.noSuchMethod(
            Invocation.getter(#hasPermissions),
            returnValue: false,
          )
          as bool);

  @override
  bool get isAvailable =>
      (super.noSuchMethod(Invocation.getter(#isAvailable), returnValue: false)
          as bool);

  @override
  String get currentLanguage =>
      (super.noSuchMethod(
            Invocation.getter(#currentLanguage),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.getter(#currentLanguage),
            ),
          )
          as String);

  @override
  _i10.TranscriptionBackend get currentBackend =>
      (super.noSuchMethod(
            Invocation.getter(#currentBackend),
            returnValue: _i10.TranscriptionBackend.device,
          )
          as _i10.TranscriptionBackend);

  @override
  _i10.TranscriptionQuality get currentQuality =>
      (super.noSuchMethod(
            Invocation.getter(#currentQuality),
            returnValue: _i10.TranscriptionQuality.low,
          )
          as _i10.TranscriptionQuality);

  @override
  double get vadSensitivity =>
      (super.noSuchMethod(Invocation.getter(#vadSensitivity), returnValue: 0.0)
          as double);

  @override
  _i7.Stream<_i3.TranscriptionSegment> get transcriptionStream =>
      (super.noSuchMethod(
            Invocation.getter(#transcriptionStream),
            returnValue: _i7.Stream<_i3.TranscriptionSegment>.empty(),
          )
          as _i7.Stream<_i3.TranscriptionSegment>);

  @override
  _i7.Stream<double> get confidenceStream =>
      (super.noSuchMethod(
            Invocation.getter(#confidenceStream),
            returnValue: _i7.Stream<double>.empty(),
          )
          as _i7.Stream<double>);

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> requestPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> startTranscription({
    bool? enableCapitalization = true,
    bool? enablePunctuation = true,
    String? language,
    _i10.TranscriptionBackend? preferredBackend,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startTranscription, [], {
              #enableCapitalization: enableCapitalization,
              #enablePunctuation: enablePunctuation,
              #language: language,
              #preferredBackend: preferredBackend,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> stopTranscription() =>
      (super.noSuchMethod(
            Invocation.method(#stopTranscription, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> pauseTranscription() =>
      (super.noSuchMethod(
            Invocation.method(#pauseTranscription, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resumeTranscription() =>
      (super.noSuchMethod(
            Invocation.method(#resumeTranscription, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguage, [languageCode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> configureQuality(_i10.TranscriptionQuality? quality) =>
      (super.noSuchMethod(
            Invocation.method(#configureQuality, [quality]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> configureBackend(_i10.TranscriptionBackend? backend) =>
      (super.noSuchMethod(
            Invocation.method(#configureBackend, [backend]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<List<String>> getAvailableLanguages() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableLanguages, []),
            returnValue: _i7.Future<List<String>>.value(<String>[]),
          )
          as _i7.Future<List<String>>);

  @override
  double getLastConfidence() =>
      (super.noSuchMethod(
            Invocation.method(#getLastConfidence, []),
            returnValue: 0.0,
          )
          as double);

  @override
  _i7.Future<_i3.TranscriptionSegment> transcribeAudio(String? audioPath) =>
      (super.noSuchMethod(
            Invocation.method(#transcribeAudio, [audioPath]),
            returnValue: _i7.Future<_i3.TranscriptionSegment>.value(
              _FakeTranscriptionSegment_1(
                this,
                Invocation.method(#transcribeAudio, [audioPath]),
              ),
            ),
          )
          as _i7.Future<_i3.TranscriptionSegment>);

  @override
  _i7.Future<void> calibrateVoiceActivity() =>
      (super.noSuchMethod(
            Invocation.method(#calibrateVoiceActivity, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setVADSensitivity(double? sensitivity) =>
      (super.noSuchMethod(
            Invocation.method(#setVADSensitivity, [sensitivity]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [LLMService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLLMService extends _i1.Mock implements _i11.LLMService {
  MockLLMService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  _i11.LLMProvider get currentProvider =>
      (super.noSuchMethod(
            Invocation.getter(#currentProvider),
            returnValue: _i11.LLMProvider.openai,
          )
          as _i11.LLMProvider);

  @override
  _i7.Future<void> initialize({
    String? openAIKey,
    String? anthropicKey,
    _i11.LLMProvider? preferredProvider,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [], {
              #openAIKey: openAIKey,
              #anthropicKey: anthropicKey,
              #preferredProvider: preferredProvider,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setProvider(_i11.LLMProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#setProvider, [provider]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i4.AnalysisResult> analyzeConversation(
    String? conversationText, {
    _i4.AnalysisType? type = _i4.AnalysisType.comprehensive,
    _i11.AnalysisPriority? priority = _i11.AnalysisPriority.normal,
    _i11.LLMProvider? provider,
    Map<String, dynamic>? context,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #analyzeConversation,
              [conversationText],
              {
                #type: type,
                #priority: priority,
                #provider: provider,
                #context: context,
              },
            ),
            returnValue: _i7.Future<_i4.AnalysisResult>.value(
              _FakeAnalysisResult_2(
                this,
                Invocation.method(
                  #analyzeConversation,
                  [conversationText],
                  {
                    #type: type,
                    #priority: priority,
                    #provider: provider,
                    #context: context,
                  },
                ),
              ),
            ),
          )
          as _i7.Future<_i4.AnalysisResult>);

  @override
  _i7.Future<List<_i4.FactCheckResult>> checkFacts(List<String>? claims) =>
      (super.noSuchMethod(
            Invocation.method(#checkFacts, [claims]),
            returnValue: _i7.Future<List<_i4.FactCheckResult>>.value(
              <_i4.FactCheckResult>[],
            ),
          )
          as _i7.Future<List<_i4.FactCheckResult>>);

  @override
  _i7.Future<_i4.ConversationSummary> generateSummary(
    _i12.ConversationModel? conversation, {
    bool? includeKeyPoints = true,
    bool? includeActionItems = true,
    int? maxWords = 200,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateSummary,
              [conversation],
              {
                #includeKeyPoints: includeKeyPoints,
                #includeActionItems: includeActionItems,
                #maxWords: maxWords,
              },
            ),
            returnValue: _i7.Future<_i4.ConversationSummary>.value(
              _FakeConversationSummary_3(
                this,
                Invocation.method(
                  #generateSummary,
                  [conversation],
                  {
                    #includeKeyPoints: includeKeyPoints,
                    #includeActionItems: includeActionItems,
                    #maxWords: maxWords,
                  },
                ),
              ),
            ),
          )
          as _i7.Future<_i4.ConversationSummary>);

  @override
  _i7.Future<List<_i4.ActionItemResult>> extractActionItems(
    String? conversationText, {
    bool? includeDeadlines = true,
    bool? includePriority = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #extractActionItems,
              [conversationText],
              {
                #includeDeadlines: includeDeadlines,
                #includePriority: includePriority,
              },
            ),
            returnValue: _i7.Future<List<_i4.ActionItemResult>>.value(
              <_i4.ActionItemResult>[],
            ),
          )
          as _i7.Future<List<_i4.ActionItemResult>>);

  @override
  _i7.Future<_i4.SentimentAnalysisResult> analyzeSentiment(String? text) =>
      (super.noSuchMethod(
            Invocation.method(#analyzeSentiment, [text]),
            returnValue: _i7.Future<_i4.SentimentAnalysisResult>.value(
              _FakeSentimentAnalysisResult_4(
                this,
                Invocation.method(#analyzeSentiment, [text]),
              ),
            ),
          )
          as _i7.Future<_i4.SentimentAnalysisResult>);

  @override
  _i7.Future<String> askQuestion(
    String? question,
    String? context, {
    _i11.LLMProvider? provider,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #askQuestion,
              [question, context],
              {#provider: provider},
            ),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(
                  #askQuestion,
                  [question, context],
                  {#provider: provider},
                ),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> configureAnalysis(_i11.AnalysisConfiguration? config) =>
      (super.noSuchMethod(
            Invocation.method(#configureAnalysis, [config]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<Map<String, dynamic>> getUsageStats() =>
      (super.noSuchMethod(
            Invocation.method(#getUsageStats, []),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<void> clearCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearCache, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [GlassesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlassesService extends _i1.Mock implements _i5.GlassesService {
  MockGlassesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.ConnectionStatus get connectionState =>
      (super.noSuchMethod(
            Invocation.getter(#connectionState),
            returnValue: _i13.ConnectionStatus.disconnected,
          )
          as _i13.ConnectionStatus);

  @override
  bool get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected), returnValue: false)
          as bool);

  @override
  _i7.Stream<_i13.ConnectionStatus> get connectionStateStream =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStateStream),
            returnValue: _i7.Stream<_i13.ConnectionStatus>.empty(),
          )
          as _i7.Stream<_i13.ConnectionStatus>);

  @override
  _i7.Stream<List<_i5.GlassesDevice>> get discoveredDevicesStream =>
      (super.noSuchMethod(
            Invocation.getter(#discoveredDevicesStream),
            returnValue: _i7.Stream<List<_i5.GlassesDevice>>.empty(),
          )
          as _i7.Stream<List<_i5.GlassesDevice>>);

  @override
  _i7.Stream<_i5.TouchGesture> get gestureStream =>
      (super.noSuchMethod(
            Invocation.getter(#gestureStream),
            returnValue: _i7.Stream<_i5.TouchGesture>.empty(),
          )
          as _i7.Stream<_i5.TouchGesture>);

  @override
  _i7.Stream<_i5.GlassesDeviceStatus> get deviceStatusStream =>
      (super.noSuchMethod(
            Invocation.getter(#deviceStatusStream),
            returnValue: _i7.Stream<_i5.GlassesDeviceStatus>.empty(),
          )
          as _i7.Stream<_i5.GlassesDeviceStatus>);

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> isBluetoothAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isBluetoothAvailable, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<bool> requestBluetoothPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestBluetoothPermission, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> startScanning({
    Duration? timeout = const Duration(seconds: 30),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startScanning, [], {#timeout: timeout}),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> stopScanning() =>
      (super.noSuchMethod(
            Invocation.method(#stopScanning, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> connectToDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#connectToDevice, [deviceId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> connectToLastDevice() =>
      (super.noSuchMethod(
            Invocation.method(#connectToLastDevice, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> displayText(
    String? text, {
    _i5.HUDPosition? position = _i5.HUDPosition.center,
    Duration? duration,
    _i5.HUDStyle? style,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #displayText,
              [text],
              {#position: position, #duration: duration, #style: style},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> displayNotification(
    String? title,
    String? message, {
    _i5.NotificationPriority? priority = _i5.NotificationPriority.normal,
    Duration? duration = const Duration(seconds: 5),
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #displayNotification,
              [title, message],
              {#priority: priority, #duration: duration},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> clearDisplay() =>
      (super.noSuchMethod(
            Invocation.method(#clearDisplay, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setBrightness(double? brightness) =>
      (super.noSuchMethod(
            Invocation.method(#setBrightness, [brightness]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> configureGestures({
    bool? enableTap = true,
    bool? enableSwipe = true,
    bool? enableLongPress = true,
    double? sensitivity = 0.5,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#configureGestures, [], {
              #enableTap: enableTap,
              #enableSwipe: enableSwipe,
              #enableLongPress: enableLongPress,
              #sensitivity: sensitivity,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> sendCommand(
    String? command, {
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #sendCommand,
              [command],
              {#parameters: parameters},
            ),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i5.GlassesDeviceInfo> getDeviceInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceInfo, []),
            returnValue: _i7.Future<_i5.GlassesDeviceInfo>.value(
              _FakeGlassesDeviceInfo_5(
                this,
                Invocation.method(#getDeviceInfo, []),
              ),
            ),
          )
          as _i7.Future<_i5.GlassesDeviceInfo>);

  @override
  _i7.Future<double> getBatteryLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getBatteryLevel, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<_i5.GlassesHealthStatus> checkDeviceHealth() =>
      (super.noSuchMethod(
            Invocation.method(#checkDeviceHealth, []),
            returnValue: _i7.Future<_i5.GlassesHealthStatus>.value(
              _FakeGlassesHealthStatus_6(
                this,
                Invocation.method(#checkDeviceHealth, []),
              ),
            ),
          )
          as _i7.Future<_i5.GlassesHealthStatus>);

  @override
  _i7.Future<void> updateFirmware() =>
      (super.noSuchMethod(
            Invocation.method(#updateFirmware, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i14.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i14.SettingsChangeEvent> get settingsChangeStream =>
      (super.noSuchMethod(
            Invocation.getter(#settingsChangeStream),
            returnValue: _i7.Stream<_i14.SettingsChangeEvent>.empty(),
          )
          as _i7.Stream<_i14.SettingsChangeEvent>);

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i14.ThemeMode> getThemeMode() =>
      (super.noSuchMethod(
            Invocation.method(#getThemeMode, []),
            returnValue: _i7.Future<_i14.ThemeMode>.value(
              _i14.ThemeMode.system,
            ),
          )
          as _i7.Future<_i14.ThemeMode>);

  @override
  _i7.Future<void> setThemeMode(_i14.ThemeMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setThemeMode, [mode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> getLanguage() =>
      (super.noSuchMethod(
            Invocation.method(#getLanguage, []),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(this, Invocation.method(#getLanguage, [])),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> setLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguage, [languageCode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i14.PrivacyLevel> getPrivacyLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getPrivacyLevel, []),
            returnValue: _i7.Future<_i14.PrivacyLevel>.value(
              _i14.PrivacyLevel.minimal,
            ),
          )
          as _i7.Future<_i14.PrivacyLevel>);

  @override
  _i7.Future<void> setPrivacyLevel(_i14.PrivacyLevel? level) =>
      (super.noSuchMethod(
            Invocation.method(#setPrivacyLevel, [level]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String?> getPreferredAudioDevice() =>
      (super.noSuchMethod(
            Invocation.method(#getPreferredAudioDevice, []),
            returnValue: _i7.Future<String?>.value(),
          )
          as _i7.Future<String?>);

  @override
  _i7.Future<void> setPreferredAudioDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#setPreferredAudioDevice, [deviceId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> getAudioQuality() =>
      (super.noSuchMethod(
            Invocation.method(#getAudioQuality, []),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getAudioQuality, []),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> setAudioQuality(String? quality) =>
      (super.noSuchMethod(
            Invocation.method(#setAudioQuality, [quality]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getNoiseReductionEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getNoiseReductionEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setNoiseReductionEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setNoiseReductionEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<double> getVADSensitivity() =>
      (super.noSuchMethod(
            Invocation.method(#getVADSensitivity, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<void> setVADSensitivity(double? sensitivity) =>
      (super.noSuchMethod(
            Invocation.method(#setVADSensitivity, [sensitivity]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> getPreferredTranscriptionBackend() =>
      (super.noSuchMethod(
            Invocation.method(#getPreferredTranscriptionBackend, []),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getPreferredTranscriptionBackend, []),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> setPreferredTranscriptionBackend(String? backend) =>
      (super.noSuchMethod(
            Invocation.method(#setPreferredTranscriptionBackend, [backend]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> getTranscriptionLanguage() =>
      (super.noSuchMethod(
            Invocation.method(#getTranscriptionLanguage, []),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getTranscriptionLanguage, []),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> setTranscriptionLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setTranscriptionLanguage, [languageCode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getAutomaticBackendSwitching() =>
      (super.noSuchMethod(
            Invocation.method(#getAutomaticBackendSwitching, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setAutomaticBackendSwitching(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutomaticBackendSwitching, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> getPreferredAIProvider() =>
      (super.noSuchMethod(
            Invocation.method(#getPreferredAIProvider, []),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getPreferredAIProvider, []),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> setPreferredAIProvider(String? provider) =>
      (super.noSuchMethod(
            Invocation.method(#setPreferredAIProvider, [provider]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String?> getAPIKey(String? provider) =>
      (super.noSuchMethod(
            Invocation.method(#getAPIKey, [provider]),
            returnValue: _i7.Future<String?>.value(),
          )
          as _i7.Future<String?>);

  @override
  _i7.Future<void> setAPIKey(String? provider, String? apiKey) =>
      (super.noSuchMethod(
            Invocation.method(#setAPIKey, [provider, apiKey]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> removeAPIKey(String? provider) =>
      (super.noSuchMethod(
            Invocation.method(#removeAPIKey, [provider]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getFactCheckingEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getFactCheckingEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setFactCheckingEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setFactCheckingEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getRealTimeAnalysisEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getRealTimeAnalysisEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setRealTimeAnalysisEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setRealTimeAnalysisEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<double> getFactCheckThreshold() =>
      (super.noSuchMethod(
            Invocation.method(#getFactCheckThreshold, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<void> setFactCheckThreshold(double? threshold) =>
      (super.noSuchMethod(
            Invocation.method(#setFactCheckThreshold, [threshold]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String?> getLastConnectedGlasses() =>
      (super.noSuchMethod(
            Invocation.method(#getLastConnectedGlasses, []),
            returnValue: _i7.Future<String?>.value(),
          )
          as _i7.Future<String?>);

  @override
  _i7.Future<void> setLastConnectedGlasses(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#setLastConnectedGlasses, [deviceId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getAutoConnectGlasses() =>
      (super.noSuchMethod(
            Invocation.method(#getAutoConnectGlasses, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setAutoConnectGlasses(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutoConnectGlasses, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<double> getHUDBrightness() =>
      (super.noSuchMethod(
            Invocation.method(#getHUDBrightness, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<void> setHUDBrightness(double? brightness) =>
      (super.noSuchMethod(
            Invocation.method(#setHUDBrightness, [brightness]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<double> getGestureSensitivity() =>
      (super.noSuchMethod(
            Invocation.method(#getGestureSensitivity, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<void> setGestureSensitivity(double? sensitivity) =>
      (super.noSuchMethod(
            Invocation.method(#setGestureSensitivity, [sensitivity]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<int> getDataRetentionDays() =>
      (super.noSuchMethod(
            Invocation.method(#getDataRetentionDays, []),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<void> setDataRetentionDays(int? days) =>
      (super.noSuchMethod(
            Invocation.method(#setDataRetentionDays, [days]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getAutomaticDataCleanup() =>
      (super.noSuchMethod(
            Invocation.method(#getAutomaticDataCleanup, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setAutomaticDataCleanup(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutomaticDataCleanup, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getAnalyticsConsent() =>
      (super.noSuchMethod(
            Invocation.method(#getAnalyticsConsent, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setAnalyticsConsent(bool? consent) =>
      (super.noSuchMethod(
            Invocation.method(#setAnalyticsConsent, [consent]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getCrashReportingConsent() =>
      (super.noSuchMethod(
            Invocation.method(#getCrashReportingConsent, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setCrashReportingConsent(bool? consent) =>
      (super.noSuchMethod(
            Invocation.method(#setCrashReportingConsent, [consent]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getCloudSyncEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getCloudSyncEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setCloudSyncEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setCloudSyncEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> getBackupFrequency() =>
      (super.noSuchMethod(
            Invocation.method(#getBackupFrequency, []),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#getBackupFrequency, []),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> setBackupFrequency(String? frequency) =>
      (super.noSuchMethod(
            Invocation.method(#setBackupFrequency, [frequency]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getLargeTextEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getLargeTextEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setLargeTextEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setLargeTextEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getHighContrastEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getHighContrastEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setHighContrastEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setHighContrastEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getReducedMotionEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getReducedMotionEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setReducedMotionEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setReducedMotionEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getDeveloperModeEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getDeveloperModeEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setDeveloperModeEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setDeveloperModeEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getDebugLoggingEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getDebugLoggingEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setDebugLoggingEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setDebugLoggingEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<bool> getBetaFeaturesEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#getBetaFeaturesEnabled, []),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<void> setBetaFeaturesEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setBetaFeaturesEnabled, [enabled]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<String> exportSettings() =>
      (super.noSuchMethod(
            Invocation.method(#exportSettings, []),
            returnValue: _i7.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#exportSettings, []),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<void> importSettings(String? settingsJson) =>
      (super.noSuchMethod(
            Invocation.method(#importSettings, [settingsJson]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resetToDefaults() =>
      (super.noSuchMethod(
            Invocation.method(#resetToDefaults, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resetCategory(_i14.SettingsCategory? category) =>
      (super.noSuchMethod(
            Invocation.method(#resetCategory, [category]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<Map<String, dynamic>> getAllSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getAllSettings, []),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i15.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setLogLevel(_i15.LogLevel? level) => super.noSuchMethod(
    Invocation.method(#setLogLevel, [level]),
    returnValueForMissingStub: null,
  );

  @override
  void log(String? tag, String? message, _i15.LogLevel? level) =>
      super.noSuchMethod(
        Invocation.method(#log, [tag, message, level]),
        returnValueForMissingStub: null,
      );

  @override
  void debug(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#debug, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void info(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#info, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void warning(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#warning, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void error(
    String? tag,
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#error, [tag, message, error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void critical(
    String? tag,
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#critical, [tag, message, error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i15.LogEntry> getRecentLogs([int? limit]) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentLogs, [limit]),
            returnValue: <_i15.LogEntry>[],
          )
          as List<_i15.LogEntry>);

  @override
  void clearLogs() => super.noSuchMethod(
    Invocation.method(#clearLogs, []),
    returnValueForMissingStub: null,
  );
}
