// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_helix/test/unit/services/glasses_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter_helix/core/utils/logging_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i2.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setLogLevel(_i2.LogLevel? level) => super.noSuchMethod(
    Invocation.method(#setLogLevel, [level]),
    returnValueForMissingStub: null,
  );

  @override
  void log(String? tag, String? message, _i2.LogLevel? level) =>
      super.noSuchMethod(
        Invocation.method(#log, [tag, message, level]),
        returnValueForMissingStub: null,
      );

  @override
  void debug(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#debug, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void info(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#info, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void warning(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#warning, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void error(
    String? tag,
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#error, [tag, message, error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void critical(
    String? tag,
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#critical, [tag, message, error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i2.LogEntry> getRecentLogs([int? limit]) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentLogs, [limit]),
            returnValue: <_i2.LogEntry>[],
          )
          as List<_i2.LogEntry>);

  @override
  void clearLogs() => super.noSuchMethod(
    Invocation.method(#clearLogs, []),
    returnValueForMissingStub: null,
  );
}
