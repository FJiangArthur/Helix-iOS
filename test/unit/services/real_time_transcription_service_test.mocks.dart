// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_helix/test/unit/services/real_time_transcription_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i6;

import 'package:flutter_helix/core/utils/logging_service.dart' as _i9;
import 'package:flutter_helix/models/audio_configuration.dart' as _i2;
import 'package:flutter_helix/models/transcription_segment.dart' as _i3;
import 'package:flutter_helix/services/audio_service.dart' as _i4;
import 'package:flutter_helix/services/transcription_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioConfiguration_0 extends _i1.SmartFake
    implements _i2.AudioConfiguration {
  _FakeAudioConfiguration_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTranscriptionSegment_1 extends _i1.SmartFake
    implements _i3.TranscriptionSegment {
  _FakeTranscriptionSegment_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AudioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioService extends _i1.Mock implements _i4.AudioService {
  MockAudioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioConfiguration get configuration =>
      (super.noSuchMethod(
            Invocation.getter(#configuration),
            returnValue: _FakeAudioConfiguration_0(
              this,
              Invocation.getter(#configuration),
            ),
          )
          as _i2.AudioConfiguration);

  @override
  bool get isRecording =>
      (super.noSuchMethod(Invocation.getter(#isRecording), returnValue: false)
          as bool);

  @override
  bool get hasPermission =>
      (super.noSuchMethod(Invocation.getter(#hasPermission), returnValue: false)
          as bool);

  @override
  _i5.Stream<_i6.Uint8List> get audioStream =>
      (super.noSuchMethod(
            Invocation.getter(#audioStream),
            returnValue: _i5.Stream<_i6.Uint8List>.empty(),
          )
          as _i5.Stream<_i6.Uint8List>);

  @override
  _i5.Stream<double> get audioLevelStream =>
      (super.noSuchMethod(
            Invocation.getter(#audioLevelStream),
            returnValue: _i5.Stream<double>.empty(),
          )
          as _i5.Stream<double>);

  @override
  _i5.Stream<bool> get voiceActivityStream =>
      (super.noSuchMethod(
            Invocation.getter(#voiceActivityStream),
            returnValue: _i5.Stream<bool>.empty(),
          )
          as _i5.Stream<bool>);

  @override
  _i5.Stream<Duration> get recordingDurationStream =>
      (super.noSuchMethod(
            Invocation.getter(#recordingDurationStream),
            returnValue: _i5.Stream<Duration>.empty(),
          )
          as _i5.Stream<Duration>);

  @override
  _i5.Future<void> initialize(_i2.AudioConfiguration? config) =>
      (super.noSuchMethod(
            Invocation.method(#initialize, [config]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> requestPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> pauseRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> resumeRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String> startConversationRecording(String? conversationId) =>
      (super.noSuchMethod(
            Invocation.method(#startConversationRecording, [conversationId]),
            returnValue: _i5.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#startConversationRecording, [
                  conversationId,
                ]),
              ),
            ),
          )
          as _i5.Future<String>);

  @override
  _i5.Future<void> stopConversationRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopConversationRecording, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i4.AudioInputDevice>> getInputDevices() =>
      (super.noSuchMethod(
            Invocation.method(#getInputDevices, []),
            returnValue: _i5.Future<List<_i4.AudioInputDevice>>.value(
              <_i4.AudioInputDevice>[],
            ),
          )
          as _i5.Future<List<_i4.AudioInputDevice>>);

  @override
  _i5.Future<void> selectInputDevice(String? deviceId) =>
      (super.noSuchMethod(
            Invocation.method(#selectInputDevice, [deviceId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> configureAudioProcessing({
    bool? enableNoiseReduction = true,
    bool? enableEchoCancellation = true,
    double? gainLevel = 1.0,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#configureAudioProcessing, [], {
              #enableNoiseReduction: enableNoiseReduction,
              #enableEchoCancellation: enableEchoCancellation,
              #gainLevel: gainLevel,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setVoiceActivityDetection(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setVoiceActivityDetection, [enabled]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setAudioQuality(_i2.AudioQuality? quality) =>
      (super.noSuchMethod(
            Invocation.method(#setAudioQuality, [quality]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> testAudioRecording() =>
      (super.noSuchMethod(
            Invocation.method(#testAudioRecording, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [TranscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranscriptionService extends _i1.Mock
    implements _i8.TranscriptionService {
  MockTranscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get isTranscribing =>
      (super.noSuchMethod(
            Invocation.getter(#isTranscribing),
            returnValue: false,
          )
          as bool);

  @override
  bool get hasPermissions =>
      (super.noSuchMethod(
            Invocation.getter(#hasPermissions),
            returnValue: false,
          )
          as bool);

  @override
  bool get isAvailable =>
      (super.noSuchMethod(Invocation.getter(#isAvailable), returnValue: false)
          as bool);

  @override
  String get currentLanguage =>
      (super.noSuchMethod(
            Invocation.getter(#currentLanguage),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#currentLanguage),
            ),
          )
          as String);

  @override
  _i8.TranscriptionBackend get currentBackend =>
      (super.noSuchMethod(
            Invocation.getter(#currentBackend),
            returnValue: _i8.TranscriptionBackend.device,
          )
          as _i8.TranscriptionBackend);

  @override
  _i8.TranscriptionQuality get currentQuality =>
      (super.noSuchMethod(
            Invocation.getter(#currentQuality),
            returnValue: _i8.TranscriptionQuality.low,
          )
          as _i8.TranscriptionQuality);

  @override
  double get vadSensitivity =>
      (super.noSuchMethod(Invocation.getter(#vadSensitivity), returnValue: 0.0)
          as double);

  @override
  _i5.Stream<_i3.TranscriptionSegment> get transcriptionStream =>
      (super.noSuchMethod(
            Invocation.getter(#transcriptionStream),
            returnValue: _i5.Stream<_i3.TranscriptionSegment>.empty(),
          )
          as _i5.Stream<_i3.TranscriptionSegment>);

  @override
  _i5.Stream<double> get confidenceStream =>
      (super.noSuchMethod(
            Invocation.getter(#confidenceStream),
            returnValue: _i5.Stream<double>.empty(),
          )
          as _i5.Stream<double>);

  @override
  _i5.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> requestPermissions() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> startTranscription({
    bool? enableCapitalization = true,
    bool? enablePunctuation = true,
    String? language,
    _i8.TranscriptionBackend? preferredBackend,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startTranscription, [], {
              #enableCapitalization: enableCapitalization,
              #enablePunctuation: enablePunctuation,
              #language: language,
              #preferredBackend: preferredBackend,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopTranscription() =>
      (super.noSuchMethod(
            Invocation.method(#stopTranscription, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> pauseTranscription() =>
      (super.noSuchMethod(
            Invocation.method(#pauseTranscription, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> resumeTranscription() =>
      (super.noSuchMethod(
            Invocation.method(#resumeTranscription, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setLanguage(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguage, [languageCode]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> configureQuality(_i8.TranscriptionQuality? quality) =>
      (super.noSuchMethod(
            Invocation.method(#configureQuality, [quality]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> configureBackend(_i8.TranscriptionBackend? backend) =>
      (super.noSuchMethod(
            Invocation.method(#configureBackend, [backend]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<String>> getAvailableLanguages() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableLanguages, []),
            returnValue: _i5.Future<List<String>>.value(<String>[]),
          )
          as _i5.Future<List<String>>);

  @override
  double getLastConfidence() =>
      (super.noSuchMethod(
            Invocation.method(#getLastConfidence, []),
            returnValue: 0.0,
          )
          as double);

  @override
  _i5.Future<_i3.TranscriptionSegment> transcribeAudio(String? audioPath) =>
      (super.noSuchMethod(
            Invocation.method(#transcribeAudio, [audioPath]),
            returnValue: _i5.Future<_i3.TranscriptionSegment>.value(
              _FakeTranscriptionSegment_1(
                this,
                Invocation.method(#transcribeAudio, [audioPath]),
              ),
            ),
          )
          as _i5.Future<_i3.TranscriptionSegment>);

  @override
  _i5.Future<void> calibrateVoiceActivity() =>
      (super.noSuchMethod(
            Invocation.method(#calibrateVoiceActivity, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setVADSensitivity(double? sensitivity) =>
      (super.noSuchMethod(
            Invocation.method(#setVADSensitivity, [sensitivity]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i9.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setLogLevel(_i9.LogLevel? level) => super.noSuchMethod(
    Invocation.method(#setLogLevel, [level]),
    returnValueForMissingStub: null,
  );

  @override
  void log(String? tag, String? message, _i9.LogLevel? level) =>
      super.noSuchMethod(
        Invocation.method(#log, [tag, message, level]),
        returnValueForMissingStub: null,
      );

  @override
  void debug(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#debug, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void info(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#info, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void warning(String? tag, String? message) => super.noSuchMethod(
    Invocation.method(#warning, [tag, message]),
    returnValueForMissingStub: null,
  );

  @override
  void error(
    String? tag,
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#error, [tag, message, error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void critical(
    String? tag,
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) => super.noSuchMethod(
    Invocation.method(#critical, [tag, message, error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.LogEntry> getRecentLogs([int? limit]) =>
      (super.noSuchMethod(
            Invocation.method(#getRecentLogs, [limit]),
            returnValue: <_i9.LogEntry>[],
          )
          as List<_i9.LogEntry>);

  @override
  void clearLogs() => super.noSuchMethod(
    Invocation.method(#clearLogs, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> enableFileLogging(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#enableFileLogging, [filePath]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void disableFileLogging() => super.noSuchMethod(
    Invocation.method(#disableFileLogging, []),
    returnValueForMissingStub: null,
  );

  @override
  void enablePerformanceLogging() => super.noSuchMethod(
    Invocation.method(#enablePerformanceLogging, []),
    returnValueForMissingStub: null,
  );

  @override
  void disablePerformanceLogging() => super.noSuchMethod(
    Invocation.method(#disablePerformanceLogging, []),
    returnValueForMissingStub: null,
  );

  @override
  void startPerformanceTimer(String? markerId) => super.noSuchMethod(
    Invocation.method(#startPerformanceTimer, [markerId]),
    returnValueForMissingStub: null,
  );

  @override
  void endPerformanceTimer(String? markerId, [String? operation]) =>
      super.noSuchMethod(
        Invocation.method(#endPerformanceTimer, [markerId, operation]),
        returnValueForMissingStub: null,
      );

  @override
  void addTagFilter(String? tag) => super.noSuchMethod(
    Invocation.method(#addTagFilter, [tag]),
    returnValueForMissingStub: null,
  );

  @override
  void removeTagFilter(String? tag) => super.noSuchMethod(
    Invocation.method(#removeTagFilter, [tag]),
    returnValueForMissingStub: null,
  );

  @override
  void clearTagFilters() => super.noSuchMethod(
    Invocation.method(#clearTagFilters, []),
    returnValueForMissingStub: null,
  );

  @override
  void setMessageFilter(String? filter) => super.noSuchMethod(
    Invocation.method(#setMessageFilter, [filter]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i9.LogEntry> getFilteredLogs({
    _i9.LogLevel? minLevel,
    String? tag,
    DateTime? since,
    int? limit,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getFilteredLogs, [], {
              #minLevel: minLevel,
              #tag: tag,
              #since: since,
              #limit: limit,
            }),
            returnValue: <_i9.LogEntry>[],
          )
          as List<_i9.LogEntry>);

  @override
  String exportLogsAsJson({
    _i9.LogLevel? minLevel,
    String? tag,
    DateTime? since,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#exportLogsAsJson, [], {
              #minLevel: minLevel,
              #tag: tag,
              #since: since,
            }),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#exportLogsAsJson, [], {
                #minLevel: minLevel,
                #tag: tag,
                #since: since,
              }),
            ),
          )
          as String);

  @override
  String exportLogsAsText({
    _i9.LogLevel? minLevel,
    String? tag,
    DateTime? since,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#exportLogsAsText, [], {
              #minLevel: minLevel,
              #tag: tag,
              #since: since,
            }),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.method(#exportLogsAsText, [], {
                #minLevel: minLevel,
                #tag: tag,
                #since: since,
              }),
            ),
          )
          as String);

  @override
  Map<String, dynamic> getLoggingStats() =>
      (super.noSuchMethod(
            Invocation.method(#getLoggingStats, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}
